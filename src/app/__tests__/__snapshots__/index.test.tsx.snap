// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<App /> should render and match the snapshot 1`] = `
<TxnHistoryProvider
  value={
    Object {
      "config": Object {
        "convert": [Function],
      },
    }
  }
>
  <Context.Provider
    value={
      Object {
        "errorRetryCount": 0,
        "refreshInterval": 0,
        "revalidateOnFocus": false,
        "revalidateOnReconnect": false,
        "shouldRetryOnError": false,
      }
    }
  >
    <BrowserRouter>
      <CfxProvider>
        <UNDEFINED />
        <Helmet
          defaultTitle="ConfluxScan"
          defer={true}
          encodeSpecialCharacters={true}
          titleTemplate="%s - ConfluxScan"
        >
          <meta
            content="BlockChain Explorer for Conflux Network"
            name="description"
          />
        </Helmet>
        <UNDEFINED />
        <ForwardRef(app__Main)>
          <Switch>
            <Route
              component={[Function]}
              exact={true}
              path="/"
            />
            <Route
              component={[Function]}
              exact={true}
              path="/packing/:txHash"
            />
            <Route
              component={[Function]}
              exact={true}
              path="/notfound/:contractAddress"
            />
            <Route
              component={[Function]}
              exact={true}
              path="/contract"
            />
            <Route
              exact={true}
              path="/contract/:contractAddress"
              render={[Function]}
            />
            <Route
              component={[Function]}
              exact={true}
              path="/contracts"
            />
            <Route
              exact={true}
              path="/token/:tokenAddress"
              render={[Function]}
            />
            <Route
              exact={true}
              path={
                Array [
                  "/blocks-and-transactions",
                  "/blockchain",
                ]
              }
              render={[Function]}
            />
            <Route
              component={[Function]}
              exact={true}
              path="/blockchain/blocks-and-transactions"
            />
            <Route
              component={[Function]}
              exact={true}
              path="/blockchain/accounts"
            />
            <Route
              component={[Function]}
              exact={true}
              path="/tokens"
            />
            <Route
              exact={true}
              path="/tokens/:tokenType"
              render={[Function]}
            />
            <Route
              component={[Function]}
              exact={true}
              path="/sponsor"
            />
            <Route
              exact={true}
              path="/sponsor/:contractAddress"
              render={[Function]}
            />
            <Route
              component={[Function]}
              path="/charts"
            />
            <Route
              exact={true}
              path="/statistics"
              render={[Function]}
            />
            <Route
              component={[Function]}
              exact={true}
              path="/statistics/:statsType"
            />
            <Route
              component={[Function]}
              exact={true}
              path={
                Array [
                  "/address-converter",
                  "/address-converter/:address",
                ]
              }
            />
            <Route
              component={[Function]}
              exact={true}
              path="/transaction/:hash"
            />
            <Route
              component={[Function]}
              exact={true}
              path="/block/:hash"
            />
            <Route
              component={[Function]}
              exact={true}
              path="/epoch/:number"
            />
            <Route
              path="/address/:address"
              render={[Function]}
            />
            <Route
              component={[Function]}
              path="/search/:text"
            />
            <Route
              component={[Function]}
            />
          </Switch>
        </ForwardRef(app__Main)>
        <Unknown />
        <GlobalNotify />
        <UNDEFINED />
      </CfxProvider>
    </BrowserRouter>
  </Context.Provider>
</TxnHistoryProvider>
`;
