{
  "metadata": {
    "title": "Conflux BlockChain Explorer",
    "description": "BlockChain Explorer for Conflux Network"
  },
  "contract": {
    "address": "Contract Address",
    "nameTag": "Contract Name Tag",
    "site": "Official Site",
    "contractIcon": "Contract Icon",
    "remove": "Remove",
    "tokenTracker": "Token Tracker",
    "tokenIcon": "Token Icon",
    "sourceCode": "Contract Source Code",
    "abi": "Contract ABI",
    "enterPassword": "Please enter your password",
    "contractAdmin": "Contract Admin",
    "creator": "Contract Creator",
    "storageSponsor": "Storage Sponsor",
    "gasSponsor": "Gas Fee Sponsor",
    "create": {
      "title": "Contract Creation"
    },
    "edit": {
      "title": "Contract Edit"
    },
    "sourceCodeShort": "Source Code",
    "abiShort": "ABI",
    "maxSize": "Max size of 30KB",
    "addressPlaceholder": "Please enter an conflux address",
    "namePlaceholder": "Support up to 35 characters",
    "sitePlaceholder": "http(s)://",
    "invalidContractAddress": "Invalid contract address, or incorrect format",
    "invalidNameTag": "The character length has reached the maximum limit",
    "invalidUrl": "Incorrect URL",
    "errorNotAdmin": "You are not the creator or admin of the contract, please disconnect and try again. ",
    "invalidIconSize": "Invalid icon size, please try again.",
    "errorTokenICon": "For the non-ERC20 contract, the token icon cannot be uploaded",
    "beforeContractSubmitTip": "Before submitting, you need to connect to ConfluxPortal to prove that you are the admin or crerator of the contract.",
    "importJsonFile": "Import Json file(s)",
    "invalidJsonFile": "Invaild Json file, please try again.",
    "invalidJsonAbi": "Unable to parse the valid ABI in the Json file, please try again.",
    "abiNotUploaded": "ABI not uploaded",
    "abiError": "ABI error",
    "readContract": "Read Contract",
    "writeContract": "Write Contract",
    "readContractInformation": "Read Contract Information",
    "writeContractInformation": "Write Contract Information",
    "expandAll": "Expand All",
    "reset": "Reset",
    "payableAmountCfx": "payableAmount (cfx) ",
    "error": {
      "address": "Please enter a conflux address",
      "bool": "Please enter true/false or 0/1",
      "int": "Please enter an integer in the range -(2^{{num}}-1) ~ 2^{{num}}-1",
      "uint": "Please enter a non-negative integer in the range of 0 ~ 2^{{num}}-1",
      "bytes": "Please enter an hexadecimal byte array starting with 0x",
      "bytesM": "Please enter an hexadecimal {{length}} byte array starting with 0x",
      "cfx": "Please enter a non-negative number with no more than 18 decimal places",
      "array": "Please enter a valid {{type}} array with square brackets",
      "tuple": "Please enter a valid tuple",
      "notSupport": "{{type}} support will be coming soon",
      "testnet": "Please switch network to Conflux Test Network in Conflux Portal",
      "mainnet": "Please switch network to Conflux Tethys in Conflux Portal"
    },
    "query": "Query",
    "write": "Write",
    "connectPortalFirst": "Please connect to ConfluxPortal first!",
    "viewTx": "View your transaction",
    "collapseAll": "Collapse All"
  },
  "contractDetail": {
    "title": "Contract Detail",
    "content": "Details of contract",
    "contractAdminWarning": "The address which owns the contract administration authority. The admin is able to destroy the contract. A non-zero admin address implies that the contract is in debug mode.",
    "at": "at",
    "txOnlyEn": "txn",
    "txOnlyZh": "",
    "clickToApply": "Click to apply contract sponsorships",
    "notDeployed": "This contract has not been deployed"
  },
  "addressDetail": {
    "minedBlocks": "Mined Blocks",
    "title": "Address Detail",
    "content": "Details of Address"
  },
  "blocksAndTransactions": {
    "title": "Blocks and Transactions",
    "description": "Blocks and Transactions",
    "tipCountBefore": "Total of",
    "tipCountAfter": "{{type}}",
    "labelCountBefore": "Total of",
    "labelCountAfter": "{{type}}",
    "blocks": "Blocks",
    "transactions": "Transactions",
    "latestBlocks": "Latest Blocks",
    "latestTransactions": "Latest Transactions"
  },
  "tokens": {
    "title": "Tokens",
    "description": "Tokens",
    "tipCountBefore": "Showing",
    "tipCountAfter": "tokens (The following list only displays certain tokens, undisplayed tokens can be found by searching contract address)",
    "dataSource": "Market Data Source: <a href='https://coinmarketcap.com/' target='_blank'>CoinMarketCap</a>",
    "table": {
      "number": "#",
      "token": "Token",
      "transfer": "Transfers",
      "totalSupply": "Total Supply",
      "holders": "Holders",
      "price": "Price",
      "change": "Change (%)",
      "volume": "Volume (24H)",
      "marketCap": "Market Cap",
      "contract": "Contract"
    }
  },
  "contracts": {
    "title": "Internal Contracts",
    "description": "Internal Contracts",
    "tipCountBefore": "Showing",
    "tipCountAfter": "internal contracts"
  },
  "header": {
    "home": "Home",
    "bnt": "Blocks & Transactions",
    "tokens": "Tokens",
    "tokens20": "ERC-20 Tokens",
    "tokens721": "ERC-721 Tokens",
    "tokens1155": "ERC-1155 Tokens",
    "contract": "Contract",
    "contractCreation": "Contract Creation",
    "contractSponsor": "Contract Sponsor",
    "contracts": "Internal Contracts",
    "charts": "Charts",
    "testnet": "Testnet",
    "oceanus": "Tethys",
    "searchPlaceHolder": "Search by Epoch / Block Hash / Txn Hash / Address",
    "searchPlaceHolderMobile": "Epoch / Block hash / Txn Hash / Address",
    "addressConverter": "address converter"
  },
  "footer": {
    "product": "Product",
    "confluxnetwork": "Conflux Network",
    "confluxportal": "ConfluxPortal",
    "confluxbounty": "ConfluxBounty",
    "copryRight": "Copyright © 2020 Conflux. All Rights Reserved.",
    "tool": "Tool",
    "addressFormatConversion": "Address Format"
  },
  "packing": {
    "title": "Your transaction is packing，please wait...",
    "btn": "Go TO HOMEPAGE"
  },
  "notFound": {
    "title": "There’s nothing here!",
    "label": "Sorry! This is an invalid search string.",
    "addressTip": "If you are searching Conflux address, please conform to conflux address format.",
    "btn": "Go TO HOMEPAGE"
  },
  "notFoundAddress": {
    "title": "The {{type}} can not be found",
    "label": "Sorry! The {{type}} does not exist.",
    "btn": "Go TO HOMEPAGE",
    "defaultType": "address",
    "contract": "contract",
    "block": "block",
    "transaction": "transaction"
  },
  "token": {
    "token": "Token",
    "totalSupplay": "Total Supply",
    "contract": "Contract",
    "holders": "Holders",
    "decimals": "Decimals",
    "transfers": "Transfers",
    "price": "Price",
    "change": "Change (%)",
    "volume": "Volume (24H)",
    "marketCap": "Market Cap",
    "shuttleflow": "This Token is cross-chained from the BTC/Ethereum network to the Conflux network via ",
    "address": "addresses",
    "transferList": {
      "searchPlaceHolder": "Txn hash / Holder address",
      "searchError": "Sorry! This is an invalid search string.",
      "balance": "Balance: "
    }
  },
  "charts": {
    "title": "Charts",
    "subtitle": "Blockchain Data",
    "description": "Charts",
    "tps": {
      "title": "TPS",
      "description": "Number of transactions on the chain per second"
    },
    "blockTime": {
      "title": "Block Time",
      "description": "The time required to generate a block"
    },
    "difficulty": {
      "title": "Difficulty",
      "description": "Calculation difficulty of all blocks currently generated"
    },
    "hashRate": {
      "title": "Hash Rate",
      "description": "The number of times a miner calculates hashes per second"
    }
  },
  "general": {
    "viewMore": "View More",
    "viewAll": "View All",
    "viewAllBlocksAndTxs": "View All Blocks & Transactions",
    "address": {
      "editContract": "Click to edit contract",
      "website": "Click to enter the official site",
      "address": "address"
    },
    "loading": "loading...",
    "contract": "contract",
    "balance": "balance",
    "token": "token",
    "storageStaking": "Storage Collateral",
    "nonce": "nonce",
    "transaction": "transaction",
    "transactions": "transactions",
    "tokenTxns": "Token Txns",
    "tokenTxnsErc20": "Erc20 Token Txns",
    "tokenTxnsErc721": "Erc721 Token Txns",
    "tokenTxnsErc1155": "Erc1155 Token Txns",
    "table": {
      "noData": "There are no matching entries.",
      "whoops": "Whoops!",
      "block": {
        "epoch": "Epoch",
        "position": "Position",
        "txns": "Txn",
        "hash": "Hash",
        "miner": "Miner",
        "avgGasPrice": "Avg.Gas Price",
        "gasUsedPercent": "Gas Used/Limit",
        "reward": "Reward",
        "age": "Age",
        "difficulty": "Difficulty",
        "gasLimit": "Gas Limit"
      },
      "transaction": {
        "hash": "Txn Hash",
        "from": "From",
        "to": "To",
        "value": "Value",
        "gasPrice": "Gas Price",
        "gasFee": "Gas Fee",
        "age": "Age"
      },
      "token": {
        "number": "#",
        "token": "Token",
        "price": "Price",
        "change": "Change (%)",
        "volume": "Volume (24H)",
        "marketCap": "Market Cap",
        "transfer": "Transfer",
        "totalSupply": "Total Supply",
        "holders": "Holders",
        "contract": "Contract",
        "txnHash": "Txn Hash",
        "age": "Age",
        "from": "From",
        "to": "To",
        "tokenId": "TokenID",
        "quantity": "Quantity"
      },
      "contracts": {
        "number": "#",
        "name": "Contract Name Tag",
        "address": "Contract Address",
        "transactionCount": "Txn"
      }
    },
    "pagination": {
      "labelPageSizeBefore": "Show",
      "labelPageSizeAfter": "Records",
      "labelJumperBefore": "Go to",
      "labelJumperAfter": "Page"
    },
    "copyButton": {
      "copyToClipboard": "Copy to clipboard",
      "success": "Copied",
      "failed": "Copy failed"
    },
    "submit": "Submit",
    "apply": "Apply",
    "search": "Search",
    "qrcodeButton": {
      "clickToShow": "Click to view QR code"
    },
    "notAvailable": "Not Available",
    "security": {
      "notAvailable": "Not available",
      "high": "Great",
      "medium": "Good",
      "low": "Weak",
      "veryLow": "Poor"
    },
    "status": {
      "skip": {
        "text": "Skip",
        "explanation": "Wrong nonce, signature verification failed, or insufficient funds."
      },
      "error": {
        "text": "Error",
        "explanation": "Encountered during contract execution, or out of gas."
      },
      "success": {
        "text": "Success",
        "explanation": ""
      },
      "unexecuted": {
        "text": "Unexecuted",
        "explanation": "Transaction has not been executed yet, please wait."
      }
    },
    "countdown": {
      "year": "{{count}} year",
      "year_plural": "{{count}} years",
      "month": "{{count}} month",
      "month_plural": "{{count}} months",
      "day": "{{count}} day",
      "day_plural": "{{count}} days",
      "hour": "{{count}} hr",
      "hour_plural": "{{count}} hrs",
      "minute": "{{count}} min",
      "minute_plural": "{{count}} mins",
      "second": "{{count}} sec",
      "second_plural": "{{count}} secs",
      "ago": "ago"
    },
    "startDate": "Start date",
    "endDate": "End date",
    "submitSucceed": "Submit succeed",
    "tabLabel": {
      "lt10000": "Total of {{total}} records",
      "gte10000": "A total of {{realTotal}} records found (showing the last {{total}} records)"
    },
    "error": {
      "title": "System Error",
      "description": {
        "10001": "ParameterError",
        "10403": "PermissionsError",
        "10501": "AssertError",
        "10503": "ApiBusyError",
        "40414": "AnnounceTooLongError",
        "40400": "SendAnnounceError",
        "40404": "AnnouncementNotExistError",
        "50404": "ContractNotFoundError",
        "50600": "CompilerError",
        "50601": "ContractDecompileError",
        "20000": "Unknow error.",
        "20001": "Response data parsing error.",
        "20002": "Request timeout.",
        "20003": "Request abort.",
        "20004": "Network error.",
        "400": "Bad request.",
        "401": "Unauthorized.",
        "403": "Forbidden.",
        "404": "Not Found.",
        "405": "Method Not Allowed.",
        "500": "Internal Server Error.",
        "501": "Not Implemented.",
        "502": "Bad Gateway.",
        "503": "Service Unavailable.",
        "504": "Gateway Timeout."
      }
    },
    "connnectWalletSubmit": "Connect wallet to submit",
    "waitForConfirm": "Waiting For Confirmation",
    "txRejected": "Transaction Rejected",
    "exportRecords": "Export Current Records"
  },
  "sponsor": {
    "title": "Contract Sponsor",
    "storageSponsor": "STORAGE SPONSOR",
    "gasFeeSponsor": "GAS FEE SPONSOR",
    "currentAvialStorageFee": "Available Storage Fee Balance",
    "currentAvialGasFee": "Available Gas Fee Balance",
    "providedStorage": "Storage Fees Provided By Conflux Foundation",
    "providedGas": "Gas Fees Provided By Conflux Foundation",
    "availStorage": "Remaining Storage Fees By Conflux Foundation",
    "availGas": "Remaining Gas Fees By Conflux Foundation",
    "connectToApply": "Connect wallet to apply",
    "notice": "Remark",
    "noticeFirst": "Conflux Foundation will sponsor Storage and Gas Fees. The amount of the sponsored funds and the application amount may vary.",
    "noticeSecond": "To request the Smart Contract Sponsorship, you need to connect to ConfluxPortal. After connection you can apply for the sponsorship.",
    "noticeFourthOne": "If you don't have ConfluxPortal as a browser extension installed yet, please visit",
    "noticeFourthTwo": "for instructions.",
    "errReachToMax": "The available balance storage fees or gas fees has reached or exceeded the maximum value",
    "errInsufficientFee": "Insufficient storage fees or gas fees by Conflux Foundation",
    "errReplaceThird": "Unable to replace the third-party sponsors of storage or gas fees",
    "errContractNotFound": "The contract cannot be found",
    "errCannotReplaced": "Third party sponsors cannot be replaced",
    "errUpgraded": "Third party sponsors cannot be replaced",
    "upperBound": "Upper Bound",
    "submitted": "Transaction Submitted",
    "txHash": "Transaction Hash",
    "searchAddress": "Search contract address",
    "applicationUnit": "application",
    "tx": "tx"
  },
  "transaction": {
    "viewOutgoingTxns": "View Outgoing Txns",
    "viewIncomingTxns": "View Incoming Txns",
    "title": "Transaction",
    "description": "Transaction",
    "hash": "Transaction Hash",
    "executedEpoch": "Executed Epoch",
    "proposedEpoch": "Proposed Epoch",
    "timestamp": "Timestamp",
    "status": "Status",
    "from": "From",
    "to": "To",
    "tokenTransferred": "Token Transferred",
    "value": "Value",
    "gasUsed": "Gas Used/Limit",
    "gasPrice": "Gas Price",
    "gasFee": "Gas Fee",
    "nonce": "Nonce",
    "blockHash": "Block Hash",
    "position": "Position",
    "storageLimit": "Storage Limit",
    "chainID": "Chain ID",
    "inputData": "Input Data",
    "select": {
      "original": "Original",
      "utf8": "UTF-8",
      "decodeInputData": "Decode Input Data"
    },
    "contract": "Contract",
    "created": "Created",
    "contractCreation": "Contract Creation",
    "for": "For",
    "inputTips": "The binary data that formed the input to the transaction, either the input data if it was a message call or the contract initialisation if it was a contract creation",
    "epochConfirmations": "{{count}} epoch Confirmations",
    "statusError": {
      "1": "Contract error: ",
      "2": "Insufficient storage fees.",
      "3": "Insufficient address balance. ",
      "4": "Insufficient gas fee.",
      "5": "Unknown contract error.",
      "6": "Contract deployment failed.",
      "7": "Unknown error."
    }
  },
  "block": {
    "title": "Block",
    "description": "Block",
    "blockHeight": "Block Height",
    "epoch": "Epoch",
    "difficulty": "Difficulty",
    "miner": "Miner",
    "reward": "Reward",
    "security": "Security",
    "blame": "Blame Block Count",
    "blockHash": "Block Hash",
    "parentHash": "Parent Hash",
    "nonce": "Nonce",
    "gasUsed": "Gas Used/Limit",
    "timestamp": "Timestamp",
    "size": "Size",
    "transactions": "Transactions",
    "referenceBlocks": "Reference Blocks",
    "tabs": {
      "transactions": "Transactions",
      "referenceBlocks": "Reference Blocks",
      "labelCountBefore": "A total of",
      "labelCountAfter": "{{type}} found"
    }
  },
  "epoch": {
    "title": "Epoch",
    "description": "Epoch",
    "tipCountBefore": "A total of",
    "tipCountAfter": "{{type}} found",
    "labelCountBefore": "A total of",
    "labelCountAfter": "{{type}} found",
    "blocks": "Blocks",
    "transactions": "Transactions",
    "table": {
      "position": "Position",
      "hash": "Hash",
      "txns": "Txn",
      "miner": "Miner",
      "difficulty": "Difficulty",
      "gasUsedPercent": "Gas Used/Limit",
      "age": "Age"
    }
  },
  "addressConverter": {
    "title": "Address Format",
    "subtitle": "The old Conflux address will be converted to a new address by using the advanced checksum method.",
    "button": "Convert",
    "inputPlaceholder": "Input address",
    "incorrectFormat": "Invalid address format",
    "lowercase": "Address in lowercase",
    "checksum": "Old checksummed address",
    "newMainnetAddress": "Conflux Tethys new address (both address types are valid)",
    "newTestnetAddress": "Conflux Testnet new address (both address types are valid)",
    "remark": "Remark:",
    "tip1": "1. The Checksum method capitalizes part of the letters in the address and forms a verification sum with the remaining lowercase letters so that the address can self-verify.",
    "tip2": "2. Conflux adopts a new checksum method different from the EIP55 standard."
  },
  "notice": {
    "mainnet": [
      "1. ConfluxScan is currently on the Mainnet Phase III - Tethys, Conflux-Rust version: {{version}}.",
      "2. Conflux Tethys Network Upgrade - Tanzanite: Conflux Tethys Network will be upgraded to v1.1.0. Please make sure to upgrade the node before 15:30 (GMT+8) on Dec. 11, 2020. Developers using the official Tethys RPC will not be affected"
    ],
    "testnet": [
      "1. ConfluxScan is currently on the testnet network, Conflux-Rust version: {{version}}, all data shown are from the testnet.",
      "2. Conflux Testnet will be upgraded to Conflux v1.1.0-testnet to test the possible network upgrade in advance. If the proposal is abandoned, the changes will be reverted in the next release. The upgrade will be completed at the block height of 4,990,000 at about 16:00 (GMT+8) on Dec 8th, 2020"
    ],
    "link": "https://forum.conflux.fun/t/topic/4342",
    "testnetLink": "https://forum.conflux.fun/t/topic/4319"
  },
  "toolTip": {
    "block": {
      "blockHeight": "The number of blocks on the path to Genesis block via parent references. The block height of a newly mined block is obtained by increasing the height of its parent block by 1. In particular, the block height of Genesis block is 0.",
      "epoch": "Epoch refers to the block height of the first pivot block that (directly or indirectly) references this block. The epoch number of a block represents the time when this block is first observed by pivot blocks. A block in an earlier epoch always precedes blocks in later epoches in the total order of all blocks.",
      "difficulty": "The amount of effort required to mine a new block. The difficulty may adjust according to time.",
      "miner": "Miner who successfully generate the block onto the blockchain.",
      "reward": "The miner of this block is rewarded with a finite amount of CFX, consists of base reward, reward from storage collateral interest and transaction fee.",
      "security": "The security of block, higher security requires more block confirmations.",
      "blame": "The number of consecutive ancestor blocks whose state commitments are incorrect and need revision. The state commitments can be realized as digests of transaction execution receipts and account status. An incorrect state commitment may affect the miner's reward, but has nothing to do with the consensus of total order of all blocks.",
      "blockHash": "The hash of the block header of the current block.",
      "parentHash": "The hash of the block from which this block was generated, also known as its parent block.",
      "nonce": "Block nonce is a value used during mining to demonstrate proof of work for a block.",
      "gasUsedLimit": "The exact units of gas that was used for the transaction; Maximum amount of gas provided for the transaction.",
      "timestamp": "The date and time at which a block is mined.",
      "size": "The block size is actually determined by the block's gas limit.",
      "transactions": "The amout of transactions which belong to the block.",
      "referenceBlocks": "The other blocks referred by the current block."
    },
    "tx": {
      "transactionHash": "A TxHash or transaction hash is a unique 66 characters identifier that is generated whenever a transaction is executed.",
      "executedEpoch": "The epoch when the transaction is actually executed.",
      "proposedEpoch": "The epoch that the sender wants the transaction to be executed. The transaction cannot be executed in epochs of number more than 100,000 from the proposed epoch number.",
      "timestamp": "The date and time at which a transaction is mined.",
      "status": "The status of the transaction.",
      "security": "The security of block, higher security requires more block confirmations.",
      "from": "The sending party of the transaction (could be from a contract address).",
      "to": "The receiving party of the transaction (could be a contract address).",
      "tokenTransferred": "List of token transferred in the transaction.",
      "value": "The value being transacted in CFX. ",
      "gasUsedLimit": "The exact units of gas that was used for the transaction; Maximum amount of gas provided for the transaction.",
      "gasPrice": "Cost per unit of gas specified for the transaction in GDrip. The higher the gas price the higher chance of getting included in a block.",
      "gasFee": "The exact fee of gas that was used for the transaction.",
      "nonce": "Sequential running number for an address, beginning with 0 for the first transaction. For example, if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address.",
      "blockHash": "A block hash is a unique 66 characters identifier that is generated whenever a transaction is executed.",
      "position": "Index position of Transaction in the block.",
      "storageLimit": "Maximum amount of storage (bytes) the sender is willing to pay for storage collateral.",
      "chainID": "The ID indicating which blockchain this transaction is meant to send to. Provides protection against replay-attack.",
      "inputData": "Additional information that is required for the transaction."
    },
    "address": {
      "balance": "The amout of assets which belong to the address.",
      "token": "The amout of tokens which belong to the address.",
      "storageCollateral": "The amount of storage collaterals paid by the current address, the unit is the CFX. ",
      "nonce": "Sequential running number for an address, beginning with 0 for the first transaction. For example, if the nonce of a transaction is 10, it would be the 11th transaction sent from the sender's address."
    },
    "token": {
      "price": "Token price.",
      "volume": "The total dollar value of all cryptocurrency transactions over the past 24 hours.",
      "marketCap": "The market value of a cryptocurrency's total supply. <br> Market Cap = Current Price x Total Supply.",
      "fullyDilutedMarketCap": "The market cap if the max supply was in circulation. Fully-diluted market cap = price x max supply.",
      "totalSupply": "Total supply of the token.",
      "holders": "The amout of addresses which hold the token.",
      "transfers": "The amout of token transactions which belongs to the address.",
      "contract": "The contract which deploys the token.",
      "decimals": "Decimals of the token. "
    },
    "contract": {
      "balance": "The amout of assets which belongs to the address.",
      "token": "The amout of tokens which belongs to the address.",
      "storageCollateral": "The amount of storage collaterals paid by the contract sponsor, the unit is the CFX.",
      "nameTag": "Name tags can be attached to an address for identifying addresses of interest.",
      "tokenTracker": "The token which was deployed by the contract.",
      "contractCreator": "The address which deploys the contract.",
      "contractAdmin": "The address which owns the contract administration authority. The admin is able to destroy the contract. A non-zero admin address implies that the contract is in debug mode.",
      "storageSponsor": "The sponsor address which pays storage collateral for transactions interacts with such a contract. ",
      "gasFeeSponsor": "The sponsor address which pays gas fee for transactions interacts with such a contract. "
    }
  },
  "connectWallet": {
    "button": {
      "text": "Connect Wallet",
      "nPending": "{{count}} Pending"
    },
    "modal": {
      "title": "Connect to a wallet",
      "installConfluxPortal": "Install ConfluxPortal",
      "confluxPortal": "ConfluxPortal",
      "initializing": "Initializing...",
      "errorConnecting": "Error connecting...",
      "tryAgain": "Try again",
      "newToConflux": "New to Conflux?",
      "learnMore": "Learn more about wallets.",
      "account": "Account",
      "connectedWithConfluxPortal": "Connected with ConfluxPortal",
      "copyAddress": "Copy address",
      "viewOnConfluxScan": "View on ConfluxScan",
      "networkNotice": "Network Notice",
      "switchToMainnet": "Please switch the network to Conflux Tethys in ConfluxPortal.",
      "switchToTestnet": "Please switch the network to Conflux Test Network in ConfluxPortal."
    },
    "history": {
      "emptyRecordsTip": "Your transcations will appear here...",
      "recentlyRecordsTip": "Recent Transcations",
      "clearAll": "Clear all",
      "recentlyTenRecordsTip": "Only the latest 10 transactions will be shown.",
      "contractCreation": "Contract creation",
      "contractEdit": "Contract edit",
      "sponsorApplication": "Sponsor application",
      "writeContract": "Write contract",
      "viewYourTranscation": "View your transcation"
    }
  },
  "txnAction": {
    "10001": "Contract creation",
    "10002": "Contract edit",
    "10003": "Write contract",
    "10004": "read contract",
    "10005": "Sponsor application"
  }
}
